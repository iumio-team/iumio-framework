<?php

/**
 *
 *  * This is an iumio Framework component
 *  *
 *  * (c) RAFINA DANY <dany.rafina@iumio.com>
 *  *
 *  * iumio Framework, an iumio component [https://iumio.com]
 *  *
 *  * To get more information about licence, please check the licence file
 *
 */

namespace iumioFramework\Core\Requirement\FrameworkServices;

use iumioFramework\Core\Exception\Server\Server403;
use iumioFramework\Core\Exception\Server\Server500;
use iumioFramework\Core\Exception\Tools\ToolsExceptions;
use iumioFramework\Core\Requirement\Environment\FEnv;
use iumioFramework\Core\Requirement\Patterns\Singleton\SingletonMulPattern;
use iumioFramework\Core\Base\Json\JsonListener as JL;

/**
 * Class AppConfig
 * @package iumioFramework\Core\Requirement\FrameworkServices
 * @category Framework
 * @licence  MIT License
 * @link https://framework.iumio.com
 * @author   RAFINA Dany <dany.rafina@iumio.com>
 */
class AppConfig extends SingletonMulPattern
{

    /**
     * The App name
     * @var null|string
     */
    protected $app = null;


    /**
     * App config content
     * @var null|\stdClass
     */
    protected $config = null;


    /**
     * AppConfig constructor.
     * Opening app config file
     * @param string $name The app name
     * @throws
     */
    protected function __construct(string $name)
    {
        $rs = $this->openAppConfig($name);
        if (null != $rs) {
            $this->config = $rs;
            $this->app = $name;
        }
        $this->setInstance($name, $this);
    }

    /** Open the config.json file for one app
     * @param string $name App name
     * @return null|\stdClass None if app does not have a config file |Â The file content if app content a config file
     * @throws \iumioFramework\Core\Exception\Server\Server500 FEnv
     */
    protected function openAppConfig(string $name) {
        if (JL::exists(FEnv::get("app.config.file", $name))) {
            return (JL::open(FEnv::get("app.config.file", $name)));
        }
        else {
            return (null);
        }
    }

    /** Check the allowed and denied host for an app
     * @return bool True if allowed
     * @throws Server403 Display the message for denied host
     * @throws Server500 For FEnv
     */
    private function checkHosts():bool {
        if (null === $this->config) {
            return (true);
        }
        $current_env = FEnv::get("framework.env");
        $ip = ToolsExceptions::getClientIp();
        $result = true;
        if ("dev" === $current_env) {
            if (property_exists($this->config, "hosts_denied_dev")) {
                $dd = $this->config->hosts_denied_dev;
                if (null !== $dd) {
                    if (false != in_array("*", $dd)) {
                        $result = false;
                    }
                    elseif (false != in_array($ip, $dd) ) {
                        $result = false;
                    }
                }
            }
            if (property_exists($this->config, "hosts_allowed_dev")) {
                $dd = $this->config->hosts_allowed_dev;
                if (null !== $dd) {
                    if (true == in_array("*", $dd) && $result) {
                        $result = true;
                    }
                    elseif (true === in_array($ip, $dd) && false === $result) {
                        $result = true;
                    }
                }
            }
        }
        elseif ("prod" === $current_env) {
            if (property_exists($this->config, "hosts_denied_prod")) {
                $dd = $this->config->hosts_denied_prod;
                if (null !== $dd) {
                    if (false != in_array("*", $dd)) {
                        $result = false;
                    }
                    elseif (false != in_array($ip, $dd) ) {
                        $result = false;
                    }
                }
            }
            if (property_exists($this->config, "hosts_allowed_prod")) {
                $dd = $this->config->hosts_allowed_prod;
                if (null !== $dd) {
                    if (true == in_array("*", $dd) && $result) {
                        $result = true;
                    }
                    elseif (true === in_array($ip, $dd) && false === $result) {
                        $result = true;
                    }
                }
            }
        }

        if (false === $result) {
            throw new Server403(new \ArrayObject(array("solution" =>
                "Add the current host to the allowed hosts list")));
        }

        return (true);
    }

    /** Check all requirements for app config
     * @return bool If no error was generated by requirements
     * @throws Server403 Forbideen error
     * @throws Server500 Fatal error
     */
    public function checkRequirements():bool {
        $this->checkHosts();
        return (true);
    }

    /** Check visibility in current env
     * @return bool True or false for visibility for each env
     * @throws Server500 Fenv
     */
    public function checkVisibility():bool {
        if (null === $this->config) {
            return (true);
        }
        $current_env = FEnv::get("framework.env");
        if (property_exists($this->config, "visibility_$current_env")) {
            if (false === $this->config->{"visibility_$current_env"}) {
                return (false);
            }
            elseif (true === $this->config->{"visibility_$current_env"}) {
                return (true);
            }
            elseif (null == $this->config->{"visibility_$current_env"}) {
                return (true);
            }
            else {
                throw new Server500(new \ArrayObject(array("explain" => "Parse Error on ".$this->app.
                    " config.json file : Cannot determine the visibility of $current_env environment",
                    "solution" => "Set the correct visibility [true, false]")));
            }
        }
        return (true);
    }

    /**
     * @return null|string
     */
    public function getApp()
    {
        return $this->app;
    }

    /**
     * @param null|string $app
     */
    public function setApp(string $app)
    {
        $this->app = $app;
    }

    /**
     * @return null|\stdClass
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param \stdClass $config
     */
    public function setConfig(\stdClass $config)
    {
        $this->config = $config;
    }

}